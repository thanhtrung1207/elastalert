pipeline {
    agent any

    environment {
        DOCKER_REGISTRY = 'trung3108'
        IMAGE_NAME = 'elastalert_container'
        IMAGE_TAG = 'latest'
        KUBECONFIG_CREDENTIALS_ID = 'kubeconfig-id'
        DOCKER_CREDENTIALS_ID = 'docker-credentials-id'
    }

    stages {
        stage('Build docker image'){
            steps {
                sh '''
                    docker build -t ${DOCKER_REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG} .
                '''
            }
        }

        stage('Push to registry'){
            steps {
                withCredentials ([usernamePassword(credentialsId: "${DOCKER_CREDENTIALS_ID}", usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]){
                sh '''
                    echo $DOCKER_PASS | docker login --username $DOCKER_USER --password-stdin
                    docker push ${DOCKER_REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG}
                '''
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                script {
                    sshPublisher(publishers: [
                        sshPublisherDesc(
                            configName: 'localhost', 
                            transfers: [
                                sshTransfer(
                                    execCommand: '''
                                        minikube status || minikube start
                                        kubectl apply -f ~/elastalert/elastalert-deployment.yaml
                                    '''
                                )
                            ],
                            usePromotionTimestamp: false,
                            verbose: true
                        )
                    ])
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}
